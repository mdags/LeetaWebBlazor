@page "/category"
@attribute [Authorize]

@using DataAccessLibrary;
@using DataAccessLibrary.Models;
@using LeetaWebBlazor.Components;
@using LeetaWebBlazor.Models;
@using System.IO;

@inject IToastService toastService
@inject ICategoryData db
@inject IJSRuntime JSRuntime

<AuthorizeView>
    <Authorized>
        <div class="content-header">
            <div class="container-fluid">
                <div class="row mb-2">
                    <div class="col-sm-9">
                        <h1 class="m-0 text-dark">Categories</h1>
                    </div>
                    <div class="col-sm-3">
                        <button type="button" class="btn btn-block btn-outline-info" @onclick="() => OpenEditDialog(null)">Add New</button>
                    </div>
                </div>
            </div>
        </div>

        <section class="content">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-md-12">
                        @if (list is null)
                        {
                            <p><em>Loading...</em></p>
                        }
                        else
                        {
                            <div class="row">
                                <div class="col-12 table-responsive">
                                    <table id="example" class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th>Name</th>
                                                <th>#</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in list)
                                            {
                                                <tr>
                                                    <td>@item.name</td>
                                                    <td class="text-nowrap col-md-1">
                                                        <button type="submit" class="btn btn-primary btn-icon-anim btn-square" @onclick="() => OpenEditDialog(item)"><i class="fa fa-edit mt-10"></i></button>
                                                        <button type="submit" class="btn btn-danger btn-icon-anim btn-square" @onclick="() => OpenConfirmDialog(item)"><i class="fa fa-trash mt-10"></i></button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </section>
    </Authorized>
</AuthorizeView>

@if (ShowEditDialog)
{
    <div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Category</h4>
                    <button type="button" class="close" @onclick="() => CloseEditDialog(false)">&times;</button>
                </div>
                <div class="modal-body">
                    <EditForm id="editForm" Model="@newModel" OnValidSubmit="() => CloseEditDialog(true)" class="form-horizontal">
                        <DataAnnotationsValidator />
                        <div class="form-group row">
                            <label for="inputName" class="col-sm-2 col-form-label">Name</label>
                            <div class="col-sm-10">
                                <InputText id="name" @bind-Value="newModel.name" class="form-control" placeholder="Name"></InputText>
                                <ValidationMessage For="@(() => newModel.name)" />
                            </div>
                        </div>
                        <div class="form-group">
                            <InputFile OnChange="@OnFileSelection"></InputFile>
                            <div class="row">
                                <img src="@ImgUrl">
                            </div>
                        </div>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary" form="editForm">SAVE</button>
                    <button type="button" class="btn btn-default" @onclick="() => CloseEditDialog(false)">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

@if (ConfirmDialogOpen)
{
    <ModalDialog DialogType="ModalDialog.ModalDialogType.DeleteCancel" Title="Confirm" Text="Do you want to delete this record?" OnClose="@OnConfirmDialogClose"></ModalDialog>
}


@code {
    private List<CategoryModel> list;
    private CategoryModel newModel = new CategoryModel();
    private CategoryModel modelToDelete;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeAsync<object>("DataTablesAdd", "#example");
    }

    protected override async Task OnInitializedAsync()
    {
        list = await db.GetList();
    }

    public bool ShowEditDialog { get; set; }
    private void OpenEditDialog(CategoryModel model)
    {
        if (model != null)
        {
            newModel = model;
        }
        ShowEditDialog = true;
        StateHasChanged();
    }
    private async Task CloseEditDialog(bool accepted)
    {
        if (accepted)
        {
            await SaveItem();
            toastService.ShowSuccess("Record added.");
        }
        newModel = new CategoryModel();
        ImgUrl = string.Empty;
        ShowEditDialog = false;
        StateHasChanged();
    }

    public string ImgUrl { get; set; }
    FileData fileData;
    private async Task OnFileSelection(InputFileChangeEventArgs e)
    {
        IBrowserFile imgFile = e.File;
        var buffers = new byte[imgFile.Size];
        await imgFile.OpenReadStream().ReadAsync(buffers);
        string imageType = imgFile.ContentType;
        string fileName = imgFile.Name;
        ImgUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffers)}";
        fileData = new FileData
        {
            Data = buffers,
            FileName = fileName,
            FileType = imageType,
            Size = imgFile.Size
        };
    }

    private async Task SaveItem()
    {
        if (fileData != null)
        {
            var path = Path.GetFullPath("wwwroot\\uploads\\") + fileData.FileName;
            using (var stream = new FileStream(path, FileMode.Create))
            {
                await stream.WriteAsync(fileData.Data);
            }
            newModel.img_path = fileData.FileName;
        }
        await db.Save(newModel);
        await OnInitializedAsync();
        newModel = new CategoryModel();
        ImgUrl = string.Empty;
    }

    public EventCallback<bool> OnClose { get; set; }
    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }
    private Task ModalOk()
    {
        return OnClose.InvokeAsync(true);
    }
    public bool ConfirmDialogOpen { get; set; }
    private async Task OnConfirmDialogClose(bool accepted)
    {
        if (accepted)
        {
            await db.Delete(modelToDelete);
            await OnInitializedAsync();
            modelToDelete = null;
            toastService.ShowSuccess("Record deleted.");
        }
        ConfirmDialogOpen = false;
        StateHasChanged();
    }
    private void OpenConfirmDialog(CategoryModel model)
    {
        ConfirmDialogOpen = true;
        modelToDelete = model;
        StateHasChanged();
    }
}
